import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Selectable,
  Updateable,
} from 'kysely'

export interface Database {
  person: PersonTable
  pet: PetTable
}

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
/**
 * 这个接口描述了 `person` 表到 Kysely 的映射。
 * 表接口应该只用于 `Database` 类型中，而不能作为查询结果的类型。
 * 请看 `Person`、`NewPerson` 和 `PersonUpdate` 类型。
 */
export interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  /**
   * 由数据库生成的列应该使用 `Generated` 类型标记。
   * 这样它们在插入和更新时会自动变为可选。
   */
  id: Generated<number>

  first_name: string
  /**
   * 如果列在数据库中是可空的，则将其类型设为可空。
   * 不要使用可选属性。可选性总是由 Kysely 自动确定。
   */
  gender: 'man' | 'woman' | 'other'

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  /**
   * 如果列在数据库中是可空的，则将其类型设为可空。
   * 不要使用可选属性。可选性总是由 Kysely 自动确定。
   */
  last_name: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  /**
   * 你可以使用 `ColumnType<SelectType, InsertType, UpdateType>` 包装器为每种操作（选择、插入和更新）指定不同的类型。
   * 这里我们定义了一个名为 `created_at` 的列，它被选择为 `Date` 类型，在插入时可以可选地提供为 `string`，并且永远不会被更新：
   */
  created_at: ColumnType<Date, string | undefined, never>

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  /**
   * 你可以使用 `JSONColumnType` 包装器指定 JSON 列。
   * 它是一个 `ColumnType<T, string, string>` 的简写，其中 T 是 JSON 对象/数组的类型，
   * 插入和更新类型总是 `string`，因为你总是将插入/更新值字符串化。
   */
  // metadata: JSONColumnType<{
  //   login_at: string
  //   ip: string | null
  //   agent: string | null
  //   plan: 'free' | 'premium'
  // }>
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
/**
 * 你不应该直接使用表模式接口。相反，你应该使用 `Selectable`、`Insertable` 和 `Updateable` 包装器。
 * 这些包装器确保在每种操作中使用正确的类型。
 * 
 * 大多数情况下你应该信任类型推断，而不使用显式类型。这些类型在类型化函数参数时很有用。
 */
export type Person = Selectable<PersonTable>
export type NewPerson = Insertable<PersonTable>
export type PersonUpdate = Updateable<PersonTable>

/**
 * 这个接口描述了 `pet` 表到 Kysely 的映射。
 * 表接口应该只用于 `Database` 类型中，而不能作为查询结果的类型。
 * 请看 `Pet`、`NewPet` 和 `PetUpdate` 类型。
 */
export interface PetTable {
  /**
   * 由数据库生成的列应该使用 `Generated` 类型标记。
   * 这样它们在插入和更新时会自动变为可选。
   */
  id: Generated<number>
  name: string
  owner_id: number
  species: 'dog' | 'cat'
}

export type Pet = Selectable<PetTable>
export type NewPet = Insertable<PetTable>
export type PetUpdate = Updateable<PetTable>
