<h1>{{ title }}</h1>
<!-- 快捷操作栏 -->
<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between">
        <span>快捷操作</span>
        <span id="weather-info">正在获取天气信息...</span>
      </div>
      <div class="card-body">
        <div class="row text-center">
          <!-- 快捷操作按钮 -->
          <div class="col-md-2">
            <a href="/admin/articles" class="btn btn-outline-primary btn-block">
              <i class="bi bi-file-text"></i> 文章管理
            </a>
          </div>
          <div class="col-md-2">
            <a href="/admin/categories/create" class="btn btn-outline-success btn-block">
              <i class="bi bi-folder-plus"></i> 新增分类
            </a>
          </div>
          <div class="col-md-2">
            <a href="/admin/tags/create" class="btn btn-outline-info btn-block">
              <i class="bi bi-tag"></i> 新增标签
            </a>
          </div>
          <div class="col-md-2">
            <a href="/admin/users/create" class="btn btn-outline-warning btn-block">
              <i class="bi bi-person-plus"></i> 添加用户
            </a>
          </div>
          <div class="col-md-2">
            <a href="/admin/accesses/create" class="btn btn-outline-danger btn-block">
              <i class="bi bi-folder-plus"></i> 添加资源
            </a>
          </div>
          <div class="col-md-2">
            <a href="/admin/settings" class="btn btn-outline-secondary btn-block">
              <i class="bi bi-gear"></i> 系统设置
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 系统概览 -->
<div class="row mb-4">
  <div class="col-md-3">
    <div class="card text-white bg-primary">
      <div class="card-body">
        <h5 class="card-title">用户总数</h5>
        <p class="card-text">{{userCount}}</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card text-white bg-success">
      <div class="card-body">
        <h5 class="card-title">文章总数</h5>
        <p class="card-text">{{articleCount}}</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card text-white bg-info">
      <div class="card-body">
        <h5 class="card-title">分类总数</h5>
        <p class="card-text">{{categoryCount}}</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card text-white bg-warning">
      <div class="card-body">
        <h5 class="card-title">标签总数</h5>
        <p class="card-text">{{tagCount}}</p>
      </div>
    </div>
  </div>
</div>

<div class="row mb-4">
  <div class="col-md-6">
    <div class="card">
      <div class="card-header">最新文章</div>
      <ul class="list-group list-group-flush">
        {{#each latestArticles}}
        <li class="list-group-item">
          <a href="/admin/articles/{{id}}">{{title}}</a>
          <span class="float-right">{{fromNow createdAt}}</span>
        </li>
        {{/each}}
      </ul>
    </div>
  </div>
  <div class="col-md-6">
    <div class="card">
      <div class="card-header">最新用户</div>
      <ul class="list-group list-group-flush">
        {{#each latestUsers}}
        <li class="list-group-item">
          <a href="/admin/users/{{id}}">{{username}}</a>
          <span class="float-right">{{fromNow createdAt}}</span>
        </li>
        {{/each}}
      </ul>
    </div>
  </div>
</div>

<!-- 内容统计图表 -->
<div class="row mb-4">
  <!-- 左侧的图表容器，用于显示文章发布趋势图表 -->
  <div class="col-md-6">
    <!-- 文章发布趋势图表的容器，宽度为100%，高度为400像素 -->
    <div id="articleTrendChart" style="width: 100%;height:400px;"></div>
  </div>
  <!-- 右侧的图表容器，用于显示用户增长趋势图表 -->
  <div class="col-md-6">
    <!-- 用户增长趋势图表的容器，宽度为100%，高度为400像素 -->
    <div id="userGrowthChart" style="width: 100%;height:400px;"></div>
  </div>
</div>
<script type="text/javascript">
  // 初始化文章发布趋势图表
  var articleTrendChart = echarts.init(document.getElementById('articleTrendChart'));
  // 配置文章发布趋势图表的选项
  var articleTrendOption = {
    title: {
      text: '文章发布趋势' // 图表标题
    },
    tooltip: {}, // 工具提示
    xAxis: {
      type: 'category', // X轴类型为类目型
      data: {{{ json articleTrend.dates }}} // X轴数据，使用模板引擎生成的日期数组
       },
  yAxis: {
    type: 'value' // Y轴类型为数值型
  },
  series: [{
    data: {{{ json articleTrend.counts }}}, // 图表数据，使用模板引擎生成的文章发布数量数组
    type: 'line' // 数据系列的图表类型为折线图
       }]
   };
  // 将配置的选项应用到文章发布趋势图表上
  articleTrendChart.setOption(articleTrendOption);

  // 初始化用户增长趋势图表
  var userGrowthChart = echarts.init(document.getElementById('userGrowthChart'));
  // 配置用户增长趋势图表的选项
  var userGrowthOption = {
    title: {
      text: '用户增长趋势' // 图表标题
    },
    tooltip: {}, // 工具提示
    xAxis: {
      type: 'category', // X轴类型为类目型
      data: {{{ json userGrowth.dates }}} // X轴数据，使用模板引擎生成的日期数组
       },
  yAxis: {
    type: 'value' // Y轴类型为数值型
  },
  series: [{
    data: {{{ json userGrowth.counts }}}, // 图表数据，使用模板引擎生成的用户增长数量数组
    type: 'bar' // 数据系列的图表类型为柱状图
       }]
   };
  // 将配置的选项应用到用户增长趋势图表上
  userGrowthChart.setOption(userGrowthOption);
</script>
<script type="text/javascript">
  $(function () {
    $.ajax({
      url: '/admin/dashboard/weather',
      method: 'GET',
      success: function (data) {
        $('#weather-info').text(data.weather);
      },
      error: function () {
        $('#weather-info').text('获取天气信息失败');
      }
    });
  });
</script>
<!-- 系统状态整体展示 -->
<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header">系统状态</div>
      <div class="card-body" id="system-status">
        <div>正在获取系统状态数据...</div>
      </div>
    </div>
  </div>
</div>
<script id="system-status-template" type="text/x-handlebars-template">
   <div class="row">
       <div class="col-md-4">
           <h5>服务器信息</h5>
           <table class="table table-striped">
               <tr><th>主机名</th><td>\{{server.hostname}}</td></tr>
               <tr><th>IP 地址</th><td>\{{server.ip}}</td></tr>
               <tr><th>操作系统</th><td>\{{server.os}}</td></tr>
               <tr><th>架构</th><td>\{{server.arch}}</td></tr>
           </table>
       </div>
       <div class="col-md-4">
           <h5>CPU 状态</h5>
           <table class="table table-striped">
               <tr><th>核心数</th><td>\{{cpu.cores}}</td></tr>
               <tr><th>用户占用率</th><td>\{{cpu.userLoad}}%</td></tr>
               <tr><th>系统占用率</th><td>\{{cpu.systemLoad}}%</td></tr>
               <tr><th>空闲率</th><td>\{{cpu.idle}}%</td></tr>
           </table>
       </div>
       <div class="col-md-4">
           <h5>内存状态</h5>
           <table class="table table-striped">
               <tr><th>总内存</th><td>\{{memory.total}} GB</td></tr>
               <tr><th>已用内存</th><td>\{{memory.used}} GB</td></tr>
               <tr><th>剩余内存</th><td>\{{memory.free}} GB</td></tr>
               <tr><th>使用率</th><td>\{{memory.usage}}%</td></tr>
           </table>
       </div>
   </div>
   <div class="row">
       <div class="col-md-12">
           <h5>磁盘状态</h5>
           <table class="table table-striped">
               <thead><tr><th>挂载点</th><th>总空间</th><th>已用</th><th>使用率</th></tr></thead>
               <tbody>
                   \{{#each disks}}
                   <tr>
                       <td>\{{this.mount}}</td>
                       <td>\{{this.size}} GB</td>
                       <td>\{{this.used}} GB</td>
                       <td>\{{this.usage}}%</td>
                   </tr>
                   \{{/each}}
               </tbody>
           </table>
       </div>
   </div>
</script>
<script type="text/javascript">
  $(function () {
    // 创建一个新的 EventSource 实例，用于从 '/admin/dashboard/systemInfo' 端点接收服务器发送的事件
    const eventSource = new EventSource('/admin/dashboard/systemInfo');
    // 获取存储在 HTML 中的 Handlebars 模板内容
    const source = $('#system-status-template').html();
    // 使用 Handlebars 编译模板，将其转换为一个可以渲染数据的函数
    const template = Handlebars.compile(source);
    // 当接收到服务器发送的消息时触发该函数
    eventSource.onmessage = function (event) {
      // 将接收到的 JSON 数据字符串解析为 JavaScript 对象
      const systemInfo = JSON.parse(event.data);
      // 使用 Handlebars 模板将系统信息渲染为 HTML
      const html = template(systemInfo);
      // 将生成的 HTML 内容插入到页面中 ID 为 'system-status' 的元素中
      $('#system-status').html(html);
    };
    // 当发生错误时触发该函数
    eventSource.onerror = function () {
      // 显示错误信息，表示无法获取系统状态数据
      $('#system-status').html('<div>获取系统状态数据失败</div>');
    };
  });
</script>
